# Initialize Terraform
terraform {
  required_version = ">= 0.12"
}

# Provider configuration
provider "aws" {
  region = "ap-south-1"  # Replace with your desired AWS region
}

resource "aws_instance" "Eks-instance" {
    ami           = "ami-049a62eb90480f276"
    instance_type = "t2.small"
    key_name = "terraform"
}

# Create VPC
resource "aws_vpc" "my_vpc" {
  cidr_block = "10.0.0.0/16"
  tags = {
    Name = "MyVPC"
  }
}

# Create subnets
resource "aws_subnet" "public_subnet_1" {
  vpc_id                  = aws_vpc.my_vpc.id
  cidr_block              = "10.0.1.0/24"
  availability_zone       = "ap-south-1a"  # Replace with desired availability zone
  map_public_ip_on_launch = true
  tags = {
    Name = "PublicSubnet1"
  }
}

resource "aws_subnet" "public_subnet_2" {
  vpc_id                  = aws_vpc.my_vpc.id
  cidr_block              = "10.0.2.0/24"
  availability_zone       = "ap-south-1b"  # Replace with desired availability zone
  map_public_ip_on_launch = true
  tags = {
    Name = "PublicSubnet2"
  }
}

# Create EKS cluster
resource "aws_eks_cluster" "my_cluster" {
  name     = "MyEksCluster"
  role_arn = aws_iam_role.my_eks_cluster_role.arn
  vpc_config {
    subnet_ids = [aws_subnet.public_subnet_1.id,aws_subnet.public_subnet_2.id]  # Use your desired subnet(s)
  }
}

# Create IAM role for EKS cluster
resource "aws_iam_role" "my_eks_cluster_role" {
  name = "MyEksClusterRole"
  assume_role_policy = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Principal": {
        "Service": "eks.amazonaws.com"
      },
      "Action": "sts:AssumeRole"
    }
  ]
}
EOF
}

# Attach necessary policies to IAM role
resource "aws_iam_role_policy_attachment" "my_eks_cluster_policy_attachment" {
  role       = aws_iam_role.my_eks_cluster_role.name
  policy_arn = "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
}

# Create EC2 instance worker node group
resource "aws_launch_configuration" "my_launch_config" {
  name_prefix          = "MyLaunchConfig"
  image_id             = "ami-049a62eb90480f276"  # Replace with desired AMI ID
  instance_type        = "t2.medium"  # Replace with desired instance type
  security_groups      = [aws_security_group.worker_node_group.id]
  associate_public_ip_address = true
  iam_instance_profile = aws_iam_instance_profile.my_instance_profile.name

  lifecycle {
    create_before_destroy = true
  }
}

resource "aws_iam_role" "my_instance_role" {
  name = "MyInstanceRole"
  assume_role_policy = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Principal": {
        "Service": "ec2.amazonaws.com"
      },
      "Action": "sts:AssumeRole"
    }
  ]
}
EOF
}

resource "aws_iam_role_policy_attachment" "my_instance_role_policy_attachment" {
  role       = aws_iam_role.my_instance_role.name
  policy_arn = "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
}

resource "aws_iam_role_policy_attachment" "my_instance_cni_policy_attachment" {
  role       = aws_iam_role.my_instance_role.name
  policy_arn = "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
}

resource "aws_iam_instance_profile" "my_instance_profile" {
  name = "MyInstanceProfile"
  role = aws_iam_role.my_instance_role.name
}

# Security Group for EC2 instance worker node group
resource "aws_security_group" "worker_node_group" {
  name        = "WorkerNodeGroupSecurityGroup"
  description = "Security group for worker node group"
  vpc_id      = aws_vpc.my_vpc.id

  ingress {
    from_port   = 0
    to_port     = 65535
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "WorkerNodeGroupSecurityGroup"
  }
}
